<?php
class UserOrdersModel extends Model{
	protected  $trueTableName	= "mls_userorders";
	protected $connection = 'DB_CONFIG1';
	
	/**
	 * 从队列里去出
	 */
	public static function getBaomingNum(){
		return rand(3000, 9000);
	}
	/**
	 * @param 商户orderid $out_trade_no
	 * @param 支付宝交易号 $trade_no
	 * @param 总价格 $total_fee
	 * @param 支付状态 int(0:未支付；1：支付成功；2：支付金额不正确；3不可退款了;4;已退款;5：等待支付;6:未知错误) $trade_status
	 * @param 所有支付信息array $payinfo
	 */
	public function UpdatePayResult($out_trade_no,$trade_no,$total_fee,$trade_status,$payinfo){
		if(
				empty($out_trade_no) ||
				empty($trade_no) ||
				empty($total_fee) ||
				empty($trade_status) ||
				empty($payinfo) 
				){
			return false;
		}
		$order = $this->where("orderid='$out_trade_no' ")->find();
		if($order){
			$myPrice = $order['orderprice'];
			$myStats = $order['paystats'];
			if($myStats ==1 || $myStats == 3){
				return true;
			}else{
				if($total_fee == $myPrice){
					//获取报名人的号牌@todo多人时需修改
					$OIFO = new OrdersInfoModel();
					$orderinfo = $OIFO->getOrderinfoByOrderid($out_trade_no);
					foreach($orderinfo as $k=>$v){
						if(empty($v['baomingdanid'])){
							//对物品进行增减
							$goodsid = $v['goodsid'];
							if(!empty($goodsid)){
								$GM = new GoodsModel();
								$Grs = $GM->updateGoodsCountById($goodsid);
								if(!$Grs){
									 //物品卖完了...怎么办?那就多预留出一个吧
								}
							}
						}
					}
					$number = $this->getBaomingNum();
				}else{
					$number = "";
					$trade_status = 2;
				}
				$out_trade_no = addslashes($out_trade_no);
				$trade_no = addslashes($trade_no);
				$trade_status = intval($trade_status);
				$payinfo 	= json_encode($payinfo);
				$data = array(
						"payorderid"=>$trade_no,
						"paystats"=>$trade_status,
						"payinfo"=>$payinfo,
// 						"number"=>$number,
						"utime"=>date("Y-m-d H:i:s")
				);
				$rs = $this->data($data)->where("orderid='$out_trade_no' ")->save();
				if(!$rs){
					$QM = new QueueModel();
					$QM->addQueue("PayResultAction", "retry", $payinfo);
				}else{
					if($trade_status == 2){
						return 2;
					}
					return true;
				}
			}
		}else{
			@mwtlog("UpdatePayResult_error","error orderid:".json_encode($payinfo),true);
			return false;
		}
	}
	public function updateAllpriceByOrderid($uid,$orderid,$orderprice){
		//paystats:支付结果状态0:未支付；1：支付成功；2：支付金额不正确；3不可退款了;4;已退款;5：等待支付;6:未知错误
		if(empty($uid) || empty($orderid)) return false;
		$rs = $this->data(array("orderprice"=>$orderprice,"paystats"=>5,"utime"=>date("Y-m-d H:i:s")))->where("uid=$uid and orderid='$orderid'")->save();
		if(!$rs){
			@mwtlog("updateAllpriceByOrderid_error","rs:".json_encode($rs)."\tsql:".$this->getLastSql(),true);
		}
		return $rs;
	}
	public function getUnCompletOrder($uid) {
		if(empty($uid) || !is_numeric($uid)) return false;
		$data = $this->where("uid = $uid and paystats = 0")->find();
// 		$data = $this->where("uid = $uid and paystats = 0")->find();
		return $data;
	}
	
	public function creatOrders($uid){
		if(empty($uid) || !is_numeric($uid)) return false;
		$orders = $this->getUnCompletOrder($uid);
		if($orders && !empty($orders['orderid'])){
			return $orders['orderid'];
		}else{
			$order = date("ymdHis");
			$order = $uid.$order.rand(1, 9);
			$time = date("Y-m-d H:i:s");
			$rs = $this->add(array("uid"=>$uid,"orderid"=>$order,"ctime"=>$time,"utime"=>$time));
			if($rs){
				return $order;
			}else {
				@mwtlog("creatOrder_error","rs:".json_encode($rs)."\tsql:".$this->getLastSql(),true);
				return false;
			}
		}
	}
}