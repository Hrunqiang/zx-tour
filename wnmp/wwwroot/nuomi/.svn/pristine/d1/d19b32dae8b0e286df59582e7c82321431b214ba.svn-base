<?php
// 本类由系统自动生成，仅供测试用途
class AccountAction extends Action {
	
	
	protected $SmsTemplate = "【知行合逸】您的验证码是%s，请勿泄露并在30分钟内填写，感谢您的参与。如非本人操作，请忽略此短信。知行合逸，全球跑步赛事，一站直达。";
	public function index() {
		header('Cache-Control:no-cache,must-revalidate');
		header('Pragma:no-cache');
		$this->assign("logon","index");
		$this->display ("Index:index");
	}
	
	
	public function test(){
		vendor('nuomi.openapi');
		$nuomiU = new NuomiUserinfo();
		$token = $_GET['token'];
		$userinfo = $nuomiU->getuserinfo($token);
		@mwtlog('nuomi_userinfo_log',$token.'\t'.json_encode($userinfo)."\r\n",true);
		if($userinfo['error']==0 && $userinfo['data']['mobile']){
			$UserM = new NuomiUsersModel();
			$usr = $UserM->checkUserExist($userinfo['data']['mobile']);
			session('SESSION_ZX_AUTHID',$usr['id']);
			session("SESSION_ZX_USERSTATE",$usr['state']);
			session("SESSION_ZX_SEXY",$usr['sexy']);
			session("SESSION_ZX_PHONE",$usr['phone']);
			$redirecturl = session("SESSION_ZX_HISTORYURL")?session("SESSION_ZX_HISTORYURL"):"/";
			redirect($redirecturl);
		}else{
			header("Content-type:text/html;charset=utf-8");
			echo "用户信息错误！<br>";
			var_dump($userinfo);
			die();
		}
		
	}
	
    /**
	 * 用户登录
	 *  
	 */
	public function login(){
		$this->assign("isnuomi",isNuomi());
		$this->assign("type",$_GET['type']);
		$this->display ();
	}
	
	/**
	 * 退出
	 */
	public function logout(){
		header('Cache-Control:no-cache,must-revalidate');
		header('Pragma:no-cache');
		session ("authId", null);
		session ("account", null);
		redirect ( '/Index' );
	}
	
	
	public function loginwindow(){
		$rs = array("error"=>65535,"data"=>"未知错误");
		$phone = htmlspecialchars(addslashes(trim($_POST['phone'])));
		$verifyCode = htmlspecialchars(addslashes(trim($_POST['code'])));
		if(!phoneCheck($phone)){
			$rs = array("error"=>1,"data"=>"手机号不能为空！");
		}else{
			$memcache = new Memcache;
			$memcache->pconnect(C('MEMCACHE_HOST'), C('MEMCACHE_PORT'));
			if(!empty($verifyCode)&&$verifyCode == $memcache ->get("ZX_TMP_PHONE_CODE_".$phone)){
				//手机验证成功
				//删除验证码
				$memcache ->delete("ZX_TMP_PHONE_CODE_".$phone);
					
				$accountM = new AccountModel();
				if(!isweixin()){
					$u_id = $accountM->auth($phone);
				}else{
					$u_id = $accountM->weixinauth($phone);
				}
					
				if($u_id){
					session("SESSION_ZX_AUTHID",$u_id);
					session("SESSION_ZX_PHONE",$phone);
					$histroy = session("SESSION_ZX_HISTORYURL")?session("SESSION_ZX_HISTORYURL"):"/";
					$rs = array("error"=>0,"data"=>"成功");
				}else{
					$rs = array("error"=>1,"data"=>"失败");
				}
			}else{
				$rs = array("error"=>1,"data"=>"验证码不对");
			};
		}
		echo json_encode($rs);
	}
	
	
	/**
	 * 手机验证码发送
	 */
	public function verify(){
		$rs = array('error'=>65535,"msg"=>"未知错误！");
	
		//1.获取图片验证码
	
		$verify = htmlspecialchars(addslashes(trim($_POST['verify'])));
	
		//验证图片验证码
		if(!$verify){
			echo json_encode(array("error"=>1000,"msg"=>"验证码不能为空！"));
			exit();
		}
	
		if(md5($verify)!=session('verify')){
			echo json_encode(array("error"=>1000,"msg"=>"验证码错误！"));
			exit();
		}
	
		//验证手机号
		$phone = htmlspecialchars(addslashes(trim($_POST['phone'])));
		if(!phoneCheck($phone)){
			echo json_encode(array("error"=>1000,"msg"=>"手机号码不能为空！"));
			exit();
		}
	
		$memcache = new Memcache;
		$memcache->pconnect(C('MEMCACHE_HOST'), C('MEMCACHE_PORT'));
	
		$ip = get_client_ip();
		$date = Date('Ymd');
	
		//手机验证码发送次数超过100次
		if($memcache->get("ZX_PHONE_VERIFY_SENDTIME".$phone."_".$date)>=100){
			@mwtlog("sms_verify_100_log",$phone."\tdata:".$memcache->get("ZX_PHONE_VERIFY_SENDTIME".$phone."_".$date),true);
			die(json_encode(array("error"=>1001,"msg"=>"今日发送短信验证码次数已达上限！")));
		}
	
		//生成随机验证码
		$a = range(0,9);
		for($i=0;$i<6;$i++){
			$b[] = array_rand($a);
		}
		$verifyCode = join("",$b);
		//缓存验证码，有效时间 半小时=1800秒
		$memcache ->set("ZX_TMP_PHONE_CODE_".$phone,$verifyCode,null,1800);
		$M = new SendSmsModel();
		$smsres = $M->send(sprintf($this->SmsTemplate,$verifyCode),$phone);
		//$smsres = "";
		@mwtlog("sms_verify_error",$phone."\tdata:".json_encode($smsres),true);
		if($smsres['error']===0){
			$rs['error'] = 0;
			$rs['msg'] = "短信发送成功！";
			$memcache->increment("ZX_PHONE_VERIFY_SENDTIME".$phone."_".$date,1);
		}else{
			$rs['error'] = 1002;
			//$rs['msg'] = "短信服务商出现问题，无法发送难证码，验证码为".$verifyCode;
			$rs['msg'] = "短信发送失败，请稍后再试！";
			//$memcache->increment("ZX_PHONE_VERIFY_SENDTIME".$phone."_".$date,1);
		}
	
		echo json_encode($rs);
	}
	
	/**
	 * 验证码
	 */
	public function imgverify() {
		import ( 'ORG.Util.Image' );
		$height = htmlspecialchars(addslashes(trim($_GET['height'])))?htmlspecialchars(addslashes(trim($_GET['height']))):30;
		$width = htmlspecialchars(addslashes(trim($_GET['width'])))?htmlspecialchars(addslashes(trim($_GET['width']))):100;
		Image::buildImageVerify(5, 1, $type='png', $width, $height);
	}
}